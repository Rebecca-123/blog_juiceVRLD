{
  
    
        "post0": {
            "title": "Restaurant Preferences",
            "content": "Restaurant Delicious Inedible .",
            "url": "https://rebecca-123.github.io/blog_juiceVRLD/pbl/2022/10/20/restaurant-table.html",
            "relUrl": "/pbl/2022/10/20/restaurant-table.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 5: Writing Classes",
            "content": ". Lesson Purpose . Understand how to write classes with attributes and methods (Java OOP) . . Hack 1 . Write the first part of the Cow class, with the body consisting of the instance variables and constructors . | If the &quot;Output produced&quot; cell is blank, there is no output produced from the code segment . | . . 5.1 Anatomy of a Class . . Methods . Define what an object can do or the behavior of an object | Can access and use the object&#39;s instance variables ### Main Method | . public static void main​(String[] args){ } . String[] args: an array consisting of command-line arguments (Strings) | . // Basic Java Class public class Snack { // class name always starts with capital letter /* * Instance variables * Always declared right after class declaration * Declared with TYPE and NAME */ private String name; private int calories; // constructor public Snack(String n, int c){ name = n; calories = c; } // methods public String getName(){ // accessor return name; } public void setName(String n){ // mutator name = n; } // main method public static void main(String[] args) { Snack one = new Snack(&quot;Oreos&quot;, 100); System.out.println(one.getName()); } } Snack.main(null); . Oreos . Access Modifiers . . Data Encapsulation . Data can be accessible or modifiable, BOTH, or NEITHER | . . Read-Only . Instance variables are declared with the private keyword ==&gt; outside the class, the instance variables can only be accessed via public methods of the class | . public class Cow { // instance variables private String cowType; private String sound; private int numMilkings; // constructor public Cow (String cowType, String sound){ this.numMilkings = 0; this.cowType = cowType; this.sound = sound; } public String getSound(){ return sound; } } public class CowDriver{ public static void main(String[] args) { Cow myCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;); System.out.println(myCow.getSound()); // myCow.sound = &quot;bark!&quot;; } } CowDriver.main(null); . moo . public class Snack { private String name; private int calories; public Snack(String n, int c){ name = n; calories = c; } public String getName(){ // accessor return name; } } public class SnackDriver { public static void main(String[] args) { Snack one = new Snack(&quot;Oreos&quot;, 100); System.out.println(one.getName()); // only accessible with getter System.out.println(one.name); } } SnackDriver.main(null); . | System.out.println(one.name); name has private access in Snack . Write-Only . public class Snack { private String name; private int calories; public Snack(String n, int c){ name = n; calories = c; } public void setName(String n){ // accessor name = n; } } public class SnackDriver { public static void main(String[] args) { Snack one = new Snack(&quot;Oreos&quot;, 100); one.setName(&quot;Double Stuffed Oreos&quot;); // only accessible with setter one.name = &quot;Golden Oreos&quot;; } } SnackDriver.main(null); . | one.name = &#34;Golden Oreos&#34;; name has private access in Snack . 5.2 Constructors . . Every instance of the Snack class has the attributes name and calories | . . public class Snack { private String name; private int calories; /* * Constructors * Syntax: * Written after instance variables, before methods * Name must match name of the class * No return type */ // default constructor public Snack(){ name = null; calories = 0; } // constructor parameters (n and c) are local variables for the constructor only // you cannot use n and c anywhere else unless you specify them as parameters for another method public Snack(String n, int c){ name = n; calories = c; } public String getName(){ // accessor return name; } public static void main(String[] args) { Snack one = new Snack(); System.out.println(&quot;Using Default Constructor: &quot; + one.getName()); Snack two = new Snack(&quot;Oreos&quot;, 100); System.out.println(&quot;Using Two Constructor: &quot; + two.getName()); } } Snack.main(null); . Using Default Constructor: null Using Two Constructor: Oreos . . Hack 2 . Write a default constructor and all-argument constructor for the Cow class Hint: all-argument constructor should have 3 parameters | . | Create 3 objects, with each object using a different constructor ie object1 uses default constructor, object2 uses constructor with 2 parameters... | . | . 5.3 Comments . Ignored by compiler, not executed | Make code more readable for humans or prevent execution when testing | Are NOT required on AP Exam | . Types . Multi-line comments (/**/) | Single-line comments (//) | Javadoc comments Javadoc tool that comes with the Java JDK can pull out comments and create a web page with all your comments | . | . Other Vocab . Precondition: condition that must be true before execution of a code block Methods don&#39;t need to check preconditions | . | Postcondition: condition that is ALWAYS true after the execution of a code block Outcome | State of instance variables | . | . 5.4 Accessor Method (Getters) . Allows other objects outside of the class to obtain values of instance variables or static variables | Non-void method returns a single value Header includes return type (String, int, Long etc) | . | &quot;return by value&quot;: return expression at the end of a method will specify that value that will be returned (must correspond to the type) | Must be used when different classes need to access the instance variables | . // always public // must specify return type // getVariable (typical naming convention) // no parameters public String getVariable(){ } . toString() Method . Overridden method that provides description of a specific object (ie values of instance variables) | If System.out.print or System.out.println() is passed an object, that object&#39;s toString() method is called ==&gt; returned string is printed Java default toString() will return a hashcode, but you can manually write your own toString() method | . | . // method header always stays the same // always returns string // no parameters public String toString(){ } . Example . public class Snack { private String name; private int calories; public Snack(String n, int c){ name = n; calories = c; } // return values of instance variables public String toString(){ return &quot;Name: &quot; + name + &quot;; &quot; + &quot;Calories: &quot; + calories; } public static void main(String[] args) { Snack two = new Snack(&quot;Oreos&quot;, 100); System.out.println(two); } } Snack.main(null); . Name: Oreos; Calories: 100 . 5.5 Mutator Method (Modifier/Setter) . Typically a void method that changes value of instance variables or static variables void methods do not return values | . | Must be used when different classes need to modify instance variables | . // always public void // setVariable (naming convention) // parameter type must match type of instance variable being modified public void setVariable(String variable){ this.variable = variable; } . Hack 3 . Create the toString method for the Cow class | Create at least one accessor and one mutator method for the Cow class | Call the getter and setter methods for one of your Cow objects | . 5.6 Writing Methods . Hack 4 . Add verse three with the rhyme “knee” to The Old Man Song | Add verse four with the rhyme &quot;door&quot; | . public class Song { /** Verse - prints out a verse of the song * @param number - a String like &quot;one&quot;, &quot;two&quot;, etc. * @param rhyme - a String like &quot;thumb&quot;, &quot;shoe&quot;, etc. */ public void verse(String number, String rhyme) { System.out.println(&quot;This old man, he played &quot; + number); System.out.println(&quot;He played knick knack on my &quot; + rhyme); } // The chorus method public void chorus() { System.out.println(&quot;With a knick knack paddy whack, give a dog a bone.&quot;); System.out.println(&quot;This old man came rolling home.&quot;); } public static void main(String args[]) { Song mySong = new Song(); mySong.verse(&quot;one&quot;, &quot;thumb&quot;); mySong.chorus(); mySong.verse(&quot;two&quot;, &quot;shoe&quot;); mySong.chorus(); } } Song.main(null); . This old man, he played one He played knick knack on my thumb With a knick knack paddy whack, give a dog a bone. This old man came rolling home. This old man, he played two He played knick knack on my shoe With a knick knack paddy whack, give a dog a bone. This old man came rolling home. .",
            "url": "https://rebecca-123.github.io/blog_juiceVRLD/cb/2022/10/03/writingClasses_lesson.html",
            "relUrl": "/cb/2022/10/03/writingClasses_lesson.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Data Modeling for Travel Website",
            "content": "Data Modeling for Travel Website . . Currency Converter . If using Spring and Thymeleaf, . User selects currency conversion (from USD or to USD…) | User provides values to convert | Java method will execute mathematical conversion | Converted value will be returned and displayed | HTML form | Java class and method | . . APIs . . Packing List . Label # Item Packed? . Would need added functionality of a database (adding/removing/editing rows) | . Itinerary . Retains same concept as above but with different column names. .",
            "url": "https://rebecca-123.github.io/blog_juiceVRLD/pbl/2022/09/24/data-models.html",
            "relUrl": "/pbl/2022/09/24/data-models.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Team Project Design",
            "content": "Team Brainwrite . Project Ideas . After-school organization tool . | Travel website . | Website Purpose . Travel web application providing users with a tool to organize travel plans and prepare for their next adventure. . Website Ideas . Authentication | Users can sign up and log in to access personal itineraries, packing lists... etc | . Search capabilities | Over entire website | Searching itinerary database | . Currency converter | Map | Notifications (possibly for change in flight data) | APIs . Flight Data | Link to Possible API to Use | . Weather API | Translator API | Databases . Itinerary | Table where users can add travel plans . | More complex idea: allow sharing/collaboration on itinerary plans (across user accounts) . | . Packing list | Locations . Los Angeles | San Fransisco | Yosemite National Park | San Diego | Sacramento | Joshua Tree | Palm Springs | Santa Barbara | Wireframes . Part 1 . Part 2 . Specific Destinations to Focus Data (Flights, Weather, Hotels) On . Our goal is to focus on popular cities in California. . Santa Barbara | Los Angeles | San Fransico | Backend/UML/Data . Roles and Tasks . Scrum Master: Rebecca . Manage scrum board | Ensure prompt delivery/completion of tasks | . Weather API for each location | fetch from deployed Spring website | . User reviews of tourist sites and restaurants | Haha/Boohoo --&gt; but with 5 stars POJO | Future concept to learn: how to add written comments (ie for users to post their reviews of restaurants and sites) | . | | . Dev Ops: Linda . Deploy Spring website | . Frontend Developer: Divya . Backend Developer: Vaishavi . Databases work + communications | . Calender/Itinerary Page | One weekly calender spread &amp; one monthly calender spread Each day will have a textbox, which people can type into to get backed up into a database (local storage --&gt; eventually database, possibly linked with account) | Idea: Users can log what they&#39;re planning to do per day, scheduling, reminders for trip | . | . Packing List | Text box that will link to database associated with the user&#39;s account | .",
            "url": "https://rebecca-123.github.io/blog_juiceVRLD/pbl/2022/09/23/brainwrite.html",
            "relUrl": "/pbl/2022/09/23/brainwrite.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "2021 Practice FRQ Problem 1",
            "content": "a) Write the WordMatch method scoreGuess. To determine the score to be returned, scoreGuess finds the number of times that guess occurs as a substring of secret and then multiplies that number by the square of the length of guess. Occurrences of guess may overlap within secret. Assume that the length of guess is less than or equal to the length of secret and that guess is not an empty string. . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { int result = 0; for (int i = 0; i &lt; secret.length(); i++) { if(secret.substring(i).indexOf(guess) == 0) { result++; } } return (result * guess.length() * guess.length)(); } } . b) Write the WordMatch method findBetterGuess, which returns the better guess of its two String parameters, guess1 and guess2. If the scoreGuess method returns different values for guess1 and guess2, then the guess with the higher score is returned. If the scoreGuess method returns the same value for guess1 and guess2, then the alphabetically greater guess is returned. The following example shows a declaration of a WordMatch object and the outcomes of some possible calls to the scoreGuess and findBetterGuess methods. WordMatch game = new WordMatch(&quot;concatenation&quot;); . // public int scoreGuess(String guess) // { /* to be implemented in part (a) */ } /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) int score1 = scoreGuess(guess1); int score2 = scoreGuess(guess2); { if(scoreGuess(guess1)&gt;scoreGuess(guess2)) { return guess1; } if(scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if(guess1.compareTo(guess2) &gt; 0 ) { return guess1; } return guess2; } .",
            "url": "https://rebecca-123.github.io/blog_juiceVRLD/cb/2022/09/19/frq2021.html",
            "relUrl": "/cb/2022/09/19/frq2021.html",
            "date": " • Sep 19, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "AP CSA Period 2: Team Juice Vrld . Scrum Board, Insights . Contributors . Name GitHub ID Role .",
          "url": "https://rebecca-123.github.io/blog_juiceVRLD/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rebecca-123.github.io/blog_juiceVRLD/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}